// PJE Executor - Controla a√ß√µes no PJe usando Playwright
const { chromium } = require('playwright');

class PJeExecutor {
  constructor() {
    this.browser = null;
    this.context = null;
    this.page = null;
    this.connected = false;
    this.userDataDir = './browser-data'; // Persistir sess√£o do usu√°rio
  }

  /**
   * Inicializa o navegador e conecta √† sess√£o existente
   */
  async initialize() {
    console.log('üåê Inicializando PJe Executor...');

    try {
      // Conectar ao navegador existente em modo debug
      // Usu√°rio precisa abrir Chrome com: chrome.exe --remote-debugging-port=9222
      this.browser = await chromium.connectOverCDP('http://localhost:9222');

      console.log('‚úÖ Conectado ao navegador existente');

      // Usar o contexto padr√£o (onde o usu√°rio j√° est√° logado)
      const contexts = this.browser.contexts();
      this.context = contexts[0];

      // Pegar a p√°gina ativa do PJe
      const pages = this.context.pages();
      this.page = pages.find(p => p.url().includes('pje.tjpa.jus.br')) || pages[0];

      console.log(`üìÑ P√°gina ativa: ${this.page.url()}`);

      this.connected = true;
      return true;

    } catch (error) {
      console.error('‚ùå Erro ao conectar ao navegador:', error.message);
      console.log('üí° Dica: Abra o Chrome com: chrome.exe --remote-debugging-port=9222');
      return false;
    }
  }

  /**
   * Executa uma a√ß√£o no PJe
   */
  async executeAction(action) {
    if (!this.connected) {
      throw new Error('Navegador n√£o conectado. Execute initialize() primeiro.');
    }

    console.log(`üéØ Executando a√ß√£o: ${action.type}`);
    if (action.visualDescription) {
      console.log(`üëÅÔ∏è Descri√ß√£o visual: ${action.visualDescription}`);
    }

    try {
      switch (action.type) {
        case 'navigate':
          return await this.navigate(action.url);

        case 'click':
          return await this.clickVisual(action.selector, action.visualDescription, action.description);

        case 'fill':
          return await this.fillVisual(action.selector, action.value, action.visualDescription, action.description);

        case 'select':
          return await this.select(action.selector, action.value);

        case 'upload':
          return await this.upload(action.selector, action.filePath);

        case 'wait':
          return await this.wait(action.milliseconds);

        case 'waitForSelector':
          return await this.waitForSelector(action.selector);

        case 'getText':
          return await this.getText(action.selector);

        case 'screenshot':
          return await this.screenshot(action.path);

        default:
          throw new Error(`Tipo de a√ß√£o desconhecido: ${action.type}`);
      }
    } catch (error) {
      console.error(`‚ùå Erro ao executar a√ß√£o ${action.type}:`, error.message);
      throw error;
    }
  }

  /**
   * Navega para uma URL
   */
  async navigate(url) {
    console.log(`üîó Navegando para: ${url}`);
    await this.page.goto(url, { waitUntil: 'domcontentloaded' });
    return { success: true, url: this.page.url() };
  }

  /**
   * Clica em um elemento (vers√£o antiga - mantida para compatibilidade)
   */
  async click(selector) {
    console.log(`üëÜ Clicando em: ${selector}`);
    await this.page.click(selector);
    return { success: true, selector };
  }

  /**
   * Clica em um elemento usando m√∫ltiplas estrat√©gias (VISUAL FIRST!)
   */
  async clickVisual(selector, visualDescription, textDescription) {
    console.log(`üëÜ Clicando com estrat√©gia visual...`);

    // Estrat√©gia 1: Tentar CSS selector se fornecido
    if (selector) {
      try {
        console.log(`  üéØ Tentando selector CSS: ${selector}`);
        await this.page.click(selector, { timeout: 5000 });
        console.log(`  ‚úÖ Sucesso com selector CSS`);
        return { success: true, selector, strategy: 'css' };
      } catch (error) {
        console.log(`  ‚ö†Ô∏è Selector CSS falhou: ${error.message}`);
      }
    }

    // Estrat√©gia 2: Tentar localizar por texto vis√≠vel
    if (textDescription) {
      try {
        console.log(`  üîç Tentando localizar por texto: "${textDescription}"`);
        const textParts = textDescription.toLowerCase().match(/["']([^"']+)["']|bot√£o\s+(\w+)|link\s+(\w+)/i);
        if (textParts) {
          const searchText = textParts[1] || textParts[2] || textParts[3];
          console.log(`  üîç Buscando elemento com texto: "${searchText}"`);

          // Tentar v√°rias estrat√©gias de texto
          const strategies = [
            `text="${searchText}"`,
            `text=${searchText}`,
            `button:has-text("${searchText}")`,
            `a:has-text("${searchText}")`,
            `[value="${searchText}"]`,
            `[title*="${searchText}" i]`,
            `[placeholder*="${searchText}" i]`
          ];

          for (const strategy of strategies) {
            try {
              await this.page.click(strategy, { timeout: 3000 });
              console.log(`  ‚úÖ Sucesso com estrat√©gia: ${strategy}`);
              return { success: true, strategy: 'text', locator: strategy };
            } catch (e) {
              // Continuar tentando
            }
          }
        }
      } catch (error) {
        console.log(`  ‚ö†Ô∏è Localiza√ß√£o por texto falhou: ${error.message}`);
      }
    }

    // Estrat√©gia 3: Usar descri√ß√£o visual para encontrar por atributos comuns
    if (visualDescription) {
      try {
        console.log(`  üëÅÔ∏è Usando descri√ß√£o visual: "${visualDescription}"`);

        // Extrair palavras-chave da descri√ß√£o visual
        const keywords = visualDescription.toLowerCase().match(/\b(pesquis\w+|consult\w+|enviar|salvar|buscar|filtrar|abrir|fechar)\b/gi);

        if (keywords && keywords.length > 0) {
          for (const keyword of keywords) {
            const visualStrategies = [
              `button:has-text("${keyword}")`,
              `input[name*="${keyword}" i]`,
              `[id*="${keyword}" i]`,
              `[class*="${keyword}" i]`,
              `a:has-text("${keyword}")`
            ];

            for (const strategy of visualStrategies) {
              try {
                await this.page.click(strategy, { timeout: 2000 });
                console.log(`  ‚úÖ Sucesso com palavra-chave visual: ${keyword}`);
                return { success: true, strategy: 'visual-keyword', keyword };
              } catch (e) {
                // Continuar
              }
            }
          }
        }
      } catch (error) {
        console.log(`  ‚ö†Ô∏è Estrat√©gia visual falhou: ${error.message}`);
      }
    }

    // Estrat√©gia 4: Tentar bot√µes comuns de pesquisa/busca
    try {
      console.log(`  üîç Tentando bot√µes comuns de pesquisa...`);
      const searchButtonStrategies = [
        'button[type="submit"]:visible',
        'button:has-text("Pesquisar"):visible',
        'button:has-text("Buscar"):visible',
        'input[type="submit"]:visible',
        '[class*="search" i]:visible:first',
        '[class*="busca" i]:visible:first',
        '[id*="search" i]:visible:first',
        '[id*="busca" i]:visible:first'
      ];

      for (const strategy of searchButtonStrategies) {
        try {
          await this.page.click(strategy, { timeout: 2000 });
          console.log(`  ‚úÖ Sucesso com bot√£o de pesquisa: ${strategy}`);
          return { success: true, strategy: 'search-button' };
        } catch (e) {
          // Continuar
        }
      }
    } catch (error) {
      console.log(`  ‚ö†Ô∏è Bot√µes de pesquisa falharam: ${error.message}`);
    }

    // Estrat√©gia 5: Tentar primeiro bot√£o vis√≠vel na p√°gina
    try {
      console.log(`  üîç Tentando primeiro bot√£o vis√≠vel...`);
      const firstButton = await this.page.locator('button:visible').first();
      await firstButton.click({ timeout: 3000 });
      console.log(`  ‚úÖ Sucesso com primeiro bot√£o vis√≠vel`);
      return { success: true, strategy: 'first-visible-button' };
    } catch (error) {
      console.log(`  ‚ö†Ô∏è Primeiro bot√£o vis√≠vel falhou: ${error.message}`);
    }

    throw new Error(`N√£o foi poss√≠vel clicar no elemento. Tentei: CSS selector, texto, descri√ß√£o visual, bot√µes de pesquisa, e primeiro bot√£o vis√≠vel.`);
  }

  /**
   * Preenche um campo de texto (vers√£o antiga - mantida para compatibilidade)
   */
  async fill(selector, value) {
    console.log(`‚úçÔ∏è Preenchendo "${selector}" com: ${value}`);
    await this.page.fill(selector, value);
    return { success: true, selector, value };
  }

  /**
   * Preenche um campo usando m√∫ltiplas estrat√©gias (VISUAL FIRST!)
   */
  async fillVisual(selector, value, visualDescription, textDescription) {
    console.log(`‚úçÔ∏è Preenchendo campo com estrat√©gia visual...`);
    console.log(`   Valor: "${value}"`);

    // Estrat√©gia 1: Tentar CSS selector se fornecido
    if (selector) {
      try {
        console.log(`  üéØ Tentando selector CSS: ${selector}`);
        await this.page.fill(selector, value, { timeout: 5000 });
        console.log(`  ‚úÖ Sucesso com selector CSS`);
        return { success: true, selector, value, strategy: 'css' };
      } catch (error) {
        console.log(`  ‚ö†Ô∏è Selector CSS falhou: ${error.message}`);
      }
    }

    // Estrat√©gia 2: Tentar localizar por placeholder
    if (textDescription) {
      try {
        const placeholderMatch = textDescription.match(/placeholder\s+["']([^"']+)["']/i);
        if (placeholderMatch) {
          const placeholder = placeholderMatch[1];
          console.log(`  üîç Tentando por placeholder: "${placeholder}"`);
          await this.page.fill(`[placeholder*="${placeholder}" i]`, value, { timeout: 3000 });
          console.log(`  ‚úÖ Sucesso com placeholder`);
          return { success: true, strategy: 'placeholder', value };
        }
      } catch (error) {
        console.log(`  ‚ö†Ô∏è Placeholder falhou: ${error.message}`);
      }
    }

    // Estrat√©gia 3: Tentar localizar por label associado
    if (textDescription || visualDescription) {
      try {
        const description = textDescription || visualDescription;
        const labelMatch = description.match(/campo\s+["']?([^"']+)["']?|input\s+["']?([^"']+)["']?/i);

        if (labelMatch) {
          const labelText = labelMatch[1] || labelMatch[2];
          console.log(`  üè∑Ô∏è Tentando localizar por label: "${labelText}"`);

          // Tentar localizar input associado ao label
          const labelStrategies = [
            `input[aria-label*="${labelText}" i]`,
            `input[title*="${labelText}" i]`,
            `input[name*="${labelText}" i]`,
            `textarea[name*="${labelText}" i]`
          ];

          for (const strategy of labelStrategies) {
            try {
              await this.page.fill(strategy, value, { timeout: 2000 });
              console.log(`  ‚úÖ Sucesso com label: ${strategy}`);
              return { success: true, strategy: 'label', value };
            } catch (e) {
              // Continuar
            }
          }
        }
      } catch (error) {
        console.log(`  ‚ö†Ô∏è Label falhou: ${error.message}`);
      }
    }

    // Estrat√©gia 4: Tentar primeiro input/textarea vis√≠vel na p√°gina
    try {
      console.log(`  üîç Tentando primeiro campo vis√≠vel...`);
      const firstInput = await this.page.locator('input:visible, textarea:visible').first();
      await firstInput.fill(value, { timeout: 3000 });
      console.log(`  ‚úÖ Sucesso com primeiro campo vis√≠vel`);
      return { success: true, strategy: 'first-visible', value };
    } catch (error) {
      console.log(`  ‚ö†Ô∏è Primeiro campo vis√≠vel falhou: ${error.message}`);
    }

    throw new Error(`N√£o foi poss√≠vel preencher o campo. Tentei: CSS selector, placeholder, label, e primeiro campo vis√≠vel.`);
  }

  /**
   * Seleciona uma op√ß√£o em um select
   */
  async select(selector, value) {
    console.log(`üìã Selecionando "${value}" em: ${selector}`);
    await this.page.selectOption(selector, value);
    return { success: true, selector, value };
  }

  /**
   * Faz upload de arquivo
   */
  async upload(selector, filePath) {
    console.log(`üì§ Upload de arquivo em "${selector}": ${filePath}`);
    await this.page.setInputFiles(selector, filePath);
    return { success: true, selector, filePath };
  }

  /**
   * Aguarda um tempo
   */
  async wait(milliseconds) {
    console.log(`‚è≥ Aguardando ${milliseconds}ms...`);
    await this.page.waitForTimeout(milliseconds);
    return { success: true, milliseconds };
  }

  /**
   * Aguarda um elemento aparecer
   */
  async waitForSelector(selector, timeout = 30000) {
    console.log(`‚è≥ Aguardando elemento: ${selector}`);
    await this.page.waitForSelector(selector, { timeout });
    return { success: true, selector };
  }

  /**
   * Obt√©m texto de um elemento
   */
  async getText(selector) {
    console.log(`üìñ Obtendo texto de: ${selector}`);
    const text = await this.page.textContent(selector);
    return { success: true, selector, text };
  }

  /**
   * Tira screenshot
   */
  async screenshot(path) {
    console.log(`üì∏ Screenshot: ${path}`);
    await this.page.screenshot({ path, fullPage: true });
    return { success: true, path };
  }

  /**
   * Tira screenshot e retorna como base64 para enviar ao GPT-4 Vision
   */
  async screenshotBase64() {
    console.log('üì∏ Capturando screenshot para an√°lise visual...');
    const screenshot = await this.page.screenshot({
      type: 'png',
      fullPage: false // Apenas viewport vis√≠vel para economizar tokens
    });
    const base64 = screenshot.toString('base64');
    console.log(`‚úÖ Screenshot capturado: ${Math.round(base64.length / 1024)}KB`);
    return base64;
  }

  /**
   * Executa JavaScript customizado na p√°gina
   */
  async evaluateScript(script) {
    console.log(`üîß Executando script customizado...`);
    const result = await this.page.evaluate(script);
    return { success: true, result };
  }

  /**
   * Obt√©m contexto da p√°gina atual
   */
  async getPageContext() {
    console.log('üìä Coletando contexto da p√°gina...');

    const context = await this.page.evaluate(() => {
      return {
        url: window.location.href,
        title: document.title,
        processNumber: window.lexSession?.processNumber || null,
        processInfo: window.lexSession?.processInfo || null,
        // Detectar em qual se√ß√£o do PJe est√°
        section: (() => {
          if (location.href.includes('painel-usuario')) return 'dashboard';
          if (location.href.includes('processo-consulta')) return 'process-view';
          if (location.href.includes('processo-criar-novo')) return 'new-process';
          if (location.href.includes('intimacao')) return 'intimations';
          return 'unknown';
        })()
      };
    });

    return context;
  }

  /**
   * Desconecta do navegador
   */
  async disconnect() {
    console.log('üëã Desconectando do navegador...');
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
      this.context = null;
      this.page = null;
      this.connected = false;
    }
  }
}

module.exports = PJeExecutor;
