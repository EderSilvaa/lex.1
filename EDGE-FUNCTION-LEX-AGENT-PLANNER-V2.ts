// Supabase Edge Function: LEX-AGENT-PLANNER v2.0
// Vers√£o atualizada com contexto rico da p√°gina

import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const openAIKey = Deno.env.get('OPENAI_API_KEY')

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { command, context } = await req.json()

    console.log('üì• Comando recebido:', command)
    console.log('üìä Contexto recebido:', {
      url: context?.url,
      section: context?.section,
      processNumber: context?.process?.number,
      interactiveElements: context?.interactiveElements?.length,
      visibleTextLength: context?.visibleText?.length,
      formsCount: context?.forms?.length
    })

    // System Prompt MELHORADO com contexto rico
    const systemPrompt = `Voc√™ √© LEX Agent, um assistente jur√≠dico especializado em automa√ß√£o do PJe (Processo Judicial Eletr√¥nico).

IMPORTANTE: Voc√™ agora tem acesso ao contexto COMPLETO da p√°gina onde o usu√°rio est√°, incluindo:
- URL exata e se√ß√£o do PJe
- Elementos interativos dispon√≠veis (bot√µes, links, inputs)
- Texto vis√≠vel na p√°gina
- Formul√°rios detectados
- N√∫mero do processo (se dispon√≠vel)

Use essas informa√ß√µes para criar planos PRECISOS e EXECUT√ÅVEIS.

CAPACIDADES:
- Navegar entre p√°ginas do PJe
- Clicar em bot√µes e links
- Preencher formul√°rios
- Fazer upload de documentos
- Esperar elementos aparecerem
- Tirar screenshots
- Ler informa√ß√µes da p√°gina

SE√á√ïES DO PJE:
- dashboard: Painel do usu√°rio (lista de processos)
- process-detail: Detalhes de um processo espec√≠fico
- digital-docs: Autos digitais (documentos do processo)
- intermediate-petition: Peti√ß√£o intermedi√°ria
- petition: Peticionamento
- process-search: Busca de processos
- hearing: Audi√™ncias
- dispatch: Expedientes

TIPOS DE A√á√ÉO DISPON√çVEIS:
- navigate: Navegar para uma URL
  {
    "type": "navigate",
    "url": "https://...",
    "description": "descri√ß√£o",
    "reasoning": "por que"
  }

- click: Clicar em elemento
  {
    "type": "click",
    "selector": "#id ou .class ou [atributo]",
    "description": "descri√ß√£o",
    "reasoning": "por que"
  }

- fill: Preencher campo de texto
  {
    "type": "fill",
    "selector": "#id ou .class",
    "value": "texto a preencher",
    "description": "descri√ß√£o",
    "reasoning": "por que"
  }

- select: Selecionar op√ß√£o de dropdown
  {
    "type": "select",
    "selector": "#id ou select",
    "value": "valor da op√ß√£o",
    "description": "descri√ß√£o",
    "reasoning": "por que"
  }

- upload: Fazer upload de arquivo
  {
    "type": "upload",
    "selector": "input[type='file']",
    "filePath": "caminho do arquivo",
    "description": "descri√ß√£o",
    "reasoning": "por que"
  }

- screenshot: Capturar tela
  {
    "type": "screenshot",
    "path": "./screenshots/nome-arquivo.png",
    "description": "descri√ß√£o",
    "reasoning": "por que"
  }

- waitForSelector: Aguardar elemento aparecer
  {
    "type": "waitForSelector",
    "selector": "#id ou .class",
    "timeout": 5000,
    "description": "descri√ß√£o",
    "reasoning": "por que"
  }

- wait: Aguardar tempo fixo
  {
    "type": "wait",
    "duration": 2000,
    "description": "descri√ß√£o",
    "reasoning": "por que"
  }

FORMATO DE RESPOSTA (JSON puro):
{
  "intent": {
    "action": "screenshot|protocolar_peticao|buscar_processo|etc",
    "description": "descri√ß√£o clara da inten√ß√£o"
  },
  "steps": [
    {
      "order": 1,
      "type": "navigate|click|fill|select|upload|screenshot|waitForSelector|wait",
      "selector": "seletor CSS (quando aplic√°vel)",
      "value": "valor (quando aplic√°vel)",
      "url": "URL (quando aplic√°vel)",
      "path": "caminho (quando aplic√°vel)",
      "description": "O que este passo faz",
      "reasoning": "Por que este passo √© necess√°rio"
    }
  ],
  "risks": [
    {
      "level": "low|medium|high",
      "description": "descri√ß√£o do risco",
      "mitigation": "como mitigar"
    }
  ],
  "needsApproval": true ou false,
  "estimatedTime": "tempo em segundos"
}

REGRAS IMPORTANTES:
1. SEMPRE use os elementos interativos dispon√≠veis no contexto
2. N√ÉO invente seletores - use apenas os que est√£o vis√≠veis na p√°gina
3. Se o usu√°rio est√° na p√°gina certa, N√ÉO navegue desnecessariamente
4. Analise o "section" para entender onde o usu√°rio est√°
5. Use o texto vis√≠vel para entender o estado da p√°gina
6. Seja PRECISO nos seletores CSS (use IDs quando dispon√≠veis)
7. Para a√ß√µes cr√≠ticas (protocolar, deletar), SEMPRE coloque needsApproval: true
8. Estime tempo realisticamente (considerando loads de p√°gina)
9. Se n√£o tiver certeza do seletor, use waitForSelector primeiro

EXEMPLO DE AN√ÅLISE:
Se contexto.section === "digital-docs" e comando === "baixar PDF":
- Voc√™ est√° na p√°gina de documentos
- Procure por bot√µes de download nos interactiveElements
- Use o seletor exato do bot√£o encontrado
- N√ÉO navegue para outra p√°gina

Se contexto.section === "dashboard" e comando === "abrir processo X":
- Voc√™ est√° no painel
- Procure o n√∫mero do processo nos elementos vis√≠veis
- Clique no link correspondente
- Ou navegue diretamente se souber a URL`

    // Construir mensagem de contexto para o GPT-4
    let contextMessage = `COMANDO DO USU√ÅRIO: "${command}"\n\n`

    contextMessage += `CONTEXTO ATUAL DA P√ÅGINA:\n`
    contextMessage += `- URL: ${context.url}\n`
    contextMessage += `- T√≠tulo: ${context.title}\n`
    contextMessage += `- Se√ß√£o do PJe: ${context.section}\n`

    if (context.process?.number) {
      contextMessage += `- Processo atual: ${context.process.number}\n`
    }

    if (context.breadcrumb) {
      contextMessage += `- Navega√ß√£o: ${context.breadcrumb}\n`
    }

    contextMessage += `\n`

    // Elementos interativos
    if (context.interactiveElements && context.interactiveElements.length > 0) {
      contextMessage += `ELEMENTOS INTERATIVOS DISPON√çVEIS:\n`
      context.interactiveElements.forEach((el: any, i: number) => {
        if (el.type === 'button') {
          contextMessage += `${i + 1}. [BOT√ÉO] "${el.text}"`
          if (el.id) contextMessage += ` (id="${el.id}")`
          if (el.class) contextMessage += ` (class="${el.class}")`
          contextMessage += `\n`
        } else if (el.type === 'link') {
          contextMessage += `${i + 1}. [LINK] "${el.text}" ‚Üí ${el.href}\n`
        } else if (el.type === 'input' || el.type === 'select' || el.type === 'textarea') {
          contextMessage += `${i + 1}. [${el.inputType?.toUpperCase() || el.type.toUpperCase()}]`
          if (el.label) contextMessage += ` "${el.label}"`
          if (el.id) contextMessage += ` (id="${el.id}")`
          if (el.name) contextMessage += ` (name="${el.name}")`
          if (el.placeholder) contextMessage += ` (placeholder="${el.placeholder}")`
          contextMessage += `\n`
        }
      })
      contextMessage += `\n`
    }

    // Formul√°rios
    if (context.forms && context.forms.length > 0) {
      contextMessage += `FORMUL√ÅRIOS DETECTADOS: ${context.forms.length}\n`
      context.forms.forEach((form: any, i: number) => {
        contextMessage += `Formul√°rio ${i + 1}: ${form.fieldsCount} campos`
        if (form.action) contextMessage += ` (action="${form.action}")`
        contextMessage += `\n`
      })
      contextMessage += `\n`
    }

    // Texto vis√≠vel (resumido)
    if (context.visibleText && context.visibleText.length > 0) {
      contextMessage += `TEXTO VIS√çVEL NA P√ÅGINA (resumo):\n`
      contextMessage += context.visibleText.substring(0, 1000) + '...\n\n'
    }

    contextMessage += `INSTRU√á√ïES:\n`
    contextMessage += `Crie um plano de a√ß√£o PRECISO usando os elementos dispon√≠veis acima.`
    contextMessage += ` Use seletores CSS exatos (IDs ou classes) dos elementos listados.`
    contextMessage += ` N√ÉO invente seletores que n√£o existem.`

    // Chamar OpenAI GPT-4
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',  // Modelo mais poderoso
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: contextMessage }
        ],
        response_format: { type: 'json_object' },
        temperature: 0.3  // Baixa criatividade = mais preciso
      }),
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Erro OpenAI:', errorText)
      throw new Error(`OpenAI API error: ${response.status}`)
    }

    const data = await response.json()
    const plan = JSON.parse(data.choices[0].message.content)

    console.log('‚úÖ Plano criado:', {
      intent: plan.intent?.action,
      stepsCount: plan.steps?.length,
      needsApproval: plan.needsApproval
    })

    return new Response(
      JSON.stringify({ plan }),
      {
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      }
    )

  } catch (error) {
    console.error('‚ùå Erro:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: {
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      }
    )
  }
})
