// LEX Agent - Bridge para contexto da p√°gina
// Este script roda no contexto da p√°gina (n√£o no content script)
(function() {
  'use strict';

  console.log('üîß LEX Agent Page Bridge carregando...');

  // Armazenar √∫ltimo plano recebido
  let lastPlan = null;

  // Escutar mensagens do content script
  window.addEventListener('message', (event) => {
    if (event.source !== window) return;

    if (event.data.type === 'LEX_AGENT_PLAN_RECEIVED') {
      lastPlan = event.data.plan;
      console.log('üìã Plano recebido e armazenado!');
    } else if (event.data.type === 'LEX_AGENT_TEST_RESULT') {
      const result = event.data.result;
      console.log('\n' + '='.repeat(60));
      console.log('üß™ RESULTADO DO TESTE');
      console.log('='.repeat(60));
      console.log(`A√ß√£o: ${result.action}`);
      console.log(`Status: ${result.success ? '‚úÖ SUCESSO' : '‚ùå FALHA'}`);
      console.log(`Mensagem: ${result.message}`);
      if (result.data) {
        console.log('Dados:', result.data);
      }
      if (result.path) {
        console.log(`Caminho: ${result.path}`);
      }
      console.log('='.repeat(60) + '\n');
    }
  });

  // Criar proxy para comunicar com o content script
  window.lexAgent = {
    executeCommand: function(command) {
      console.log('üöÄ LEX Agent: Enviando comando:', command);
      window.postMessage({
        type: 'LEX_AGENT_COMMAND',
        command: command
      }, '*');
      return 'Comando enviado para processamento';
    },

    getStatus: function() {
      console.log('üìä LEX Agent: Solicitando status...');
      window.postMessage({
        type: 'LEX_AGENT_GET_STATUS'
      }, '*');
    },

    isConnected: function() {
      console.log('üîç LEX Agent: Verificando conex√£o...');
      window.postMessage({
        type: 'LEX_AGENT_IS_CONNECTED'
      }, '*');
    },

    getLastPlan: function() {
      if (!lastPlan) {
        console.warn('‚ö†Ô∏è Nenhum plano recebido ainda. Execute um comando primeiro.');
        return null;
      }
      console.log('üìã √öltimo plano recebido:');
      console.table(lastPlan.steps);
      console.log('‚ö†Ô∏è Riscos identificados:', lastPlan.risks);
      console.log('üîí Requer aprova√ß√£o:', lastPlan.needsApproval);
      console.log('‚è±Ô∏è Tempo estimado:', lastPlan.estimatedTime + 's');
      return lastPlan;
    },

    showPlanDetails: function() {
      if (!lastPlan) {
        console.warn('‚ö†Ô∏è Nenhum plano recebido ainda. Execute um comando primeiro.');
        return;
      }

      console.log('\n' + '='.repeat(60));
      console.log('üìã DETALHES DO PLANO DE A√á√ÉO');
      console.log('='.repeat(60));

      console.log('\nüéØ INTEN√á√ÉO:');
      console.log(`  A√ß√£o: ${lastPlan.intent.action}`);
      console.log(`  Descri√ß√£o: ${lastPlan.intent.description}`);

      console.log('\nüìù PASSOS A EXECUTAR:');
      lastPlan.steps.forEach((step, i) => {
        console.log(`\n  ${i + 1}. ${step.description}`);
        console.log(`     Tipo: ${step.type}`);
        if (step.selector) console.log(`     Seletor: ${step.selector}`);
        if (step.value) console.log(`     Valor: ${step.value}`);
        if (step.url) console.log(`     URL: ${step.url}`);
        console.log(`     Motivo: ${step.reasoning}`);
      });

      console.log('\n‚ö†Ô∏è RISCOS IDENTIFICADOS:');
      lastPlan.risks.forEach((risk, i) => {
        console.log(`\n  ${i + 1}. [${risk.level.toUpperCase()}] ${risk.description}`);
        console.log(`     Mitiga√ß√£o: ${risk.mitigation}`);
      });

      console.log('\nüîí APROVA√á√ÉO NECESS√ÅRIA:', lastPlan.needsApproval ? 'SIM' : 'N√ÉO');
      console.log('‚è±Ô∏è TEMPO ESTIMADO:', lastPlan.estimatedTime + ' segundos');
      console.log('\n' + '='.repeat(60) + '\n');
    },

    approvePlan: function() {
      if (!lastPlan) {
        console.error('‚ùå Nenhum plano para aprovar');
        return;
      }
      console.log('‚úÖ Aprovando execu√ß√£o do plano...');
      window.postMessage({
        type: 'LEX_AGENT_APPROVE_ACTION',
        planId: 'current'
      }, '*');
    },

    // üîç TESTAR CONTEXTO RICO
    getRichContext: function() {
      console.log('üìä Solicitando contexto rico da p√°gina...');
      window.postMessage({
        type: 'LEX_AGENT_GET_RICH_CONTEXT'
      }, '*');
    },

    // üß™ COMANDOS DE TESTE DO PLAYWRIGHT
    test: {
      screenshot: function() {
        console.log('üì∏ Solicitando screenshot da p√°gina...');
        window.postMessage({
          type: 'LEX_AGENT_TEST',
          action: 'screenshot'
        }, '*');
      },

      getPageInfo: function() {
        console.log('üìÑ Solicitando informa√ß√µes da p√°gina...');
        window.postMessage({
          type: 'LEX_AGENT_TEST',
          action: 'pageInfo'
        }, '*');
      },

      readProcessNumber: function() {
        console.log('üîç Solicitando leitura do n√∫mero do processo...');
        window.postMessage({
          type: 'LEX_AGENT_TEST',
          action: 'readProcess'
        }, '*');
      },

      connectBrowser: function() {
        console.log('üåê Testando conex√£o com navegador...');
        window.postMessage({
          type: 'LEX_AGENT_TEST',
          action: 'connect'
        }, '*');
      }
    }
  };

  console.log('‚úÖ window.lexAgent criado e acess√≠vel!');
  console.log('üìã Comandos dispon√≠veis:');
  console.log('  - lexAgent.executeCommand("analisar processo")');
  console.log('  - lexAgent.getLastPlan() - Ver √∫ltimo plano');
  console.log('  - lexAgent.showPlanDetails() - Ver detalhes do plano');
  console.log('  - lexAgent.approvePlan() - Aprovar e executar');
  console.log('  - lexAgent.getRichContext() - Ver contexto rico da p√°gina');
  console.log('  - lexAgent.getStatus()');
  console.log('  - lexAgent.isConnected()');
  console.log('');
  console.log('üß™ Comandos de teste Playwright:');
  console.log('  - lexAgent.test.connectBrowser() - Conectar ao navegador');
  console.log('  - lexAgent.test.screenshot() - Tirar screenshot');
  console.log('  - lexAgent.test.getPageInfo() - Ler info da p√°gina');
  console.log('  - lexAgent.test.readProcessNumber() - Ler n√∫mero do processo');

})();
